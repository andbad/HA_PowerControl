#################################################################
################# PACKAGE CONTROLLO CARICHI #####################
#################################################################
# Autore: andbad                                                #
# GitHub: https://github.com/andbad/HA_PowerControl             #
# Versione: 3.70                                                #
#################################################################
########################### CREDITS #############################
# Un ringraziamento alla community di InDomus per l'aiuto       #
# ricevuto nella compilazione del seguente package.             #
#       ----->>      https://indomus.it/      <<-----           #
#################################################################


# Il package seguente, unito allo script python "update_entities.py" mira ad evitare il distacco del contatore a causa
# della troppa potenza assorbita dai vari elettrodomestici (carichi).
# Requisito hardware fondamentale è la presenza di switch sui carichi da controllare e di un sensore che misura la potenza
# dei singoli carichi. 
# Personalmente ho utilizzato dispositivi Shelly 1PM e Shelly Plug S, perfetti per lo scopo.
# E' consigliato, ma non tassativo, l'utilizzo di un sensore che monitori il consumo complessivo dell'impianto (es. Shelly EM).
# La logica prevede che in caso l'utilizzo complessivo superi il valore limite impostato, il pacchetto inizi il distacco
# dei carichi a minore priorità fino a quelli a maggiore priorità, fino a che l'utilizzo complessivo della potenza rientri
# nel limite prefissato. 
# Vi sono due limiti massimi: nel caso in cui si superi il valore massimo "ritardato", il sitema attenderà alcuni minuti
# (regolabili da apposita opzione) prima di procedere con il distacco; nel caso in cui si superi il valore massimo immediato,
# il distacco avviene invece dopo alcuni secondi (anche in questo caso regolati da relativo slider).
# Lo script tiene memoria dell'assorbimento del carico prima del distacco e lo ricollega solo quando la disponibilità
# di potenza è sufficiente a non causare un nuovo distacco, a meno che non sia abilitata l'opzione specifica di non riavvio
# per quel singolo carico.
# La configurazione è interamente tramite interfaccia grafica, tranne il gruppo di notifica (group.tutti) che va impostato
# manualmente.

#################################################################
########################## RECORDER #############################
#################################################################
# I seguenti sensori devono essere abilitati nel recorder, al fine di visualizzare lo storico di intervento nel grafico
# dell'interfaccia grafica. Decommentare le seguenti righe potrebbe influire sulla configurazione del recorder in altri file.

#recorder:
#  include:
#    entities:
#      - sensor.potenza_carichi_selezionato
#      - sensor.potenza_carichi_sospesa
#      - sensor.potenza_massima_immediato
#      - sensor.potenza_massima_ritardato

#################################################################
########################## SENSORI ##############################
#################################################################
# La soluzione più efficace è utilizzare un sensore di potenza a monte dell'impianto, poco prima del contatore.
# In tal caso basta selezionare il sensore appropriato nella configurazione.
# Nell'esempio seguente è utilizzato uno ShellyEM, nel canale 1.
#  - platform: mqtt
#      name: "Potenza carichi"
#      state_topic: "shellies/NOME_SHELLY/emeter/0/power"
#      value_template: "{{ value }}"
#      unit_of_measurement : "W"
#      icon: hass:speedometer

template:
# In alternativa è possibile utilizzare i sensori di potenza dei maggiori carichi utilizzati e mantenere un certo margine 
# di tolleranza.
# Questo comporta di monitorare tutti i maggiori carichi (forno, piano induzione, phon, condizionatori, ecc...).
# Naturalmente in questo modo non si può valutare il consumo complessivo, quindi si potrebbe superare il valore limite 
# senza che intervenga il controllo carichi.
# Utilizzando un valore conservativo di potenza massima (ad es. 3kW) e contando sulla tolleranze di 180 minuti fino al 80% 
# (nell'es. 3,6kW) è ugualmente funzionale.
  - sensor:
    - name: potenza_carichi_virtuale
      unit_of_measurement: 'W'
      device_class: power
      state_class: measurement
      state: >
        {{ states(states('input_text.carico_1_potenza'))|int(default=0) +
           states(states('input_text.carico_2_potenza'))|int(default=0) +
           states(states('input_text.carico_3_potenza'))|int(default=0) +
           states(states('input_text.carico_4_potenza'))|int(default=0) +
           states(states('input_text.carico_5_potenza'))|int(default=0) +
           states(states('input_text.carico_6_potenza'))|int(default=0) +
           states(states('input_text.carico_7_potenza'))|int(default=0) +
           states(states('input_text.carico_8_potenza'))|int(default=0) +
           states(states('input_text.carico_9_potenza'))|int(default=0) +
           states(states('input_text.carico_10_potenza'))|int(default=0) +
           states(states('input_text.carico_11_potenza'))|int(default=0) +
           states(states('input_text.carico_12_potenza'))|int(default=0) +
           states(states('input_text.carico_13_potenza'))|int(default=0) +
           states(states('input_text.carico_14_potenza'))|int(default=0) +
           states(states('input_text.carico_15_potenza'))|int(default=0) +
           states(states('input_text.carico_16_potenza'))|int(default=0) +
           states(states('input_text.carico_17_potenza'))|int(default=0) +
           states(states('input_text.carico_18_potenza'))|int(default=0) +
           states(states('input_text.carico_19_potenza'))|int(default=0) +
           states(states('input_text.carico_20_potenza'))|int(default=0) }}

# Somma di tutte le potenza "sospesa", ovvero i carichi che erano in funzione con un dato assorbimento ma sono stati 
# disattivati.
    - name: potenza_carichi_sospesa
      unit_of_measurement: 'W'
      device_class: power
      state_class: measurement
      state: >
        {{ states('input_number.potenza_1_sospesa')|int(default=0) +
           states('input_number.potenza_2_sospesa')|int(default=0) +
           states('input_number.potenza_3_sospesa')|int(default=0) +
           states('input_number.potenza_4_sospesa')|int(default=0) +
           states('input_number.potenza_5_sospesa')|int(default=0) +
           states('input_number.potenza_6_sospesa')|int(default=0) +
           states('input_number.potenza_7_sospesa')|int(default=0) +
           states('input_number.potenza_8_sospesa')|int(default=0) +
           states('input_number.potenza_9_sospesa')|int(default=0) +
           states('input_number.potenza_10_sospesa')|int(default=0) +
           states('input_number.potenza_11_sospesa')|int(default=0) +
           states('input_number.potenza_12_sospesa')|int(default=0) +
           states('input_number.potenza_13_sospesa')|int(default=0) +
           states('input_number.potenza_14_sospesa')|int(default=0) +
           states('input_number.potenza_15_sospesa')|int(default=0) +
           states('input_number.potenza_16_sospesa')|int(default=0) +
           states('input_number.potenza_17_sospesa')|int(default=0) +
           states('input_number.potenza_18_sospesa')|int(default=0) +
           states('input_number.potenza_19_sospesa')|int(default=0) +
           states('input_number.potenza_20_sospesa')|int(default=0) }}

# Mostra lo stato del sensore selezionato, utile per il grafico.
    - name: potenza_carichi_selezionato
      unit_of_measurement: 'W'
      device_class: power
      state_class: measurement
      state: "{{ states(states('input_text.potenza_carichi'))|int(default=0) }}"

# Valore massimo che i carichi possono impegnare prima di cominciare il distacco
    - name: potenza_massima_immediato
      unit_of_measurement: 'W'
      device_class: power
      state_class: measurement
      state: "{{ states('input_number.potenza_massima_immediato')|int(default=0) }}"

    - name:  potenza_massima_ritardato
      unit_of_measurement: 'W'
      device_class: power
      state_class: measurement
      state: "{{ states('input_number.potenza_massima_ritardato')|int(default=0) }}"

#################################################################
######################### INPUT_* ###############################
#################################################################
input_text:
# In questi campi viene salvato il nome delle entità selezionate dal front-end.
  carico_1_potenza:
  carico_2_potenza:
  carico_3_potenza:
  carico_4_potenza:
  carico_5_potenza:
  carico_6_potenza:
  carico_7_potenza:
  carico_8_potenza:
  carico_9_potenza:
  carico_10_potenza:
  carico_11_potenza:
  carico_12_potenza:
  carico_13_potenza:
  carico_14_potenza:
  carico_15_potenza:
  carico_16_potenza:
  carico_17_potenza:
  carico_18_potenza:
  carico_19_potenza:
  carico_20_potenza:

  carico_1_switch:
  carico_2_switch:
  carico_3_switch:
  carico_4_switch:
  carico_5_switch:
  carico_6_switch:
  carico_7_switch:
  carico_8_switch:
  carico_9_switch:
  carico_10_switch:
  carico_11_switch:
  carico_12_switch:
  carico_13_switch:
  carico_14_switch:
  carico_15_switch:
  carico_16_switch:
  carico_17_switch:
  carico_18_switch:
  carico_19_switch:
  carico_20_switch:

  potenza_carichi:

input_boolean:
# Switch per l'interfaccia grafica 
  attiva_power_control:
    name: Attiva Power Control
    icon: hass:car-cruise-control

  impostazioni_power_control:
    name: Mostra Impostazioni Power Control
    icon: hass:car-cruise-control

  # Tiene traccia del trigger che ha innescato l'automazione di stop: 
  # se è "0"significa che si è superata la soglia del distacco ritardato
  # se è "1" si è inveve superata la soglia di distacco immediato.
  sensore_trigger:
    name: sensore trigger
    initial: off

  # Se messo su on, attiva il nuovo script che filtra solo le entità che iniziano con "sensor.potenza" e "switch.interruttore"
  selezione_script_python:
    name: Selezione script Pyton

  mantini_spento_1:
    name: Mantieni spento Carico 1
    icon: hass:cancel
  mantini_spento_2:
    name: Mantieni spento Carico 2
    icon: hass:cancel
  mantini_spento_3:
    name: Mantieni spento Carico 3
    icon: hass:cancel
  mantini_spento_4:
    name: Mantieni spento Carico 4
    icon: hass:cancel
  mantini_spento_5:
    name: Mantieni spento Carico 5
    icon: hass:cancel
  mantini_spento_6:
    name: Mantieni spento Carico 6
    icon: hass:cancel
  mantini_spento_7:
    name: Mantieni spento Carico 7
    icon: hass:cancel
  mantini_spento_8:
    name: Mantieni spento Carico 8
    icon: hass:cancel
  mantini_spento_9:
    name: Mantieni spento Carico 9
    icon: hass:cancel
  mantini_spento_10:
    name: Mantieni spento Carico 10
    icon: hass:cancel
  mantini_spento_11:
    name: Mantieni spento Carico 11
    icon: hass:cancel
  mantini_spento_12:
    name: Mantieni spento Carico 12
    icon: hass:cancel
  mantini_spento_13:
    name: Mantieni spento Carico 13
    icon: hass:cancel
  mantini_spento_14:
    name: Mantieni spento Carico 14
    icon: hass:cancel
  mantini_spento_15:
    name: Mantieni spento Carico 15
    icon: hass:cancel
  mantini_spento_16:
    name: Mantieni spento Carico 16
    icon: hass:cancel
  mantini_spento_17:
    name: Mantieni spento Carico 17
    icon: hass:cancel
  mantini_spento_18:
    name: Mantieni spento Carico 18
    icon: hass:cancel
  mantini_spento_19:
    name: Mantieni spento Carico 19
    icon: hass:cancel
  mantini_spento_20:
    name: Mantieni spento Carico 20
    icon: hass:cancel

input_number:

# Mantengono memoria della potenza utilizzata al momento del distacco, per valutare la riattivazione.
  potenza_1_sospesa:
    min: 0
    max: 10000
  potenza_2_sospesa:
    min: 0
    max: 10000
  potenza_3_sospesa:
    min: 0
    max: 10000
  potenza_4_sospesa:
    min: 0
    max: 10000
  potenza_5_sospesa:
    min: 0
    max: 10000
  potenza_6_sospesa:
    min: 0
    max: 10000
  potenza_7_sospesa:
    min: 0
    max: 10000
  potenza_8_sospesa:
    min: 0
    max: 10000
  potenza_9_sospesa:
    min: 0
    max: 10000
  potenza_10_sospesa:
    min: 0
    max: 10000
  potenza_11_sospesa:
    min: 0
    max: 10000
  potenza_12_sospesa:
    min: 0
    max: 10000
  potenza_13_sospesa:
    min: 0
    max: 10000
  potenza_14_sospesa:
    min: 0
    max: 10000
  potenza_15_sospesa:
    min: 0
    max: 10000
  potenza_16_sospesa:
    min: 0
    max: 10000
  potenza_17_sospesa:
    min: 0
    max: 10000
  potenza_18_sospesa:
    min: 0
    max: 10000
  potenza_19_sospesa:
    min: 0
    max: 10000
  potenza_20_sospesa:
    min: 0
    max: 10000

  # Slider per la configurazione della potenza massima utilizzabile, superata questa soglia il distacco è immediato
  potenza_massima_immediato:
    min: 0
    max: 15000
    step: 100

  # Slider per la configurazione della potenza massima utilizzabile, superata questa soglia vengono attesi alcuni minuti
  # prima del distacco.
  potenza_massima_ritardato:
    min: 0
    max: 15000
    step: 100

  #Attende tot SECONDI tra un distacco e l'altro.
  tempo_stop_immediato:
    min: 5
    max: 60
    step: 1

  #Attende tot MINUTI tra un distacco e l'altro.
  tempo_stop_ritardato:
    min: 1
    max: 180
    step: 10

  #Dopo tot MINUTI che la potenza utilizzata è rientrata nei limiti, inizia a riattivare i carichi
  tempo_start:
    min: 1
    max: 60
    step: 1

  #Attende tot SECONDI tra un distacco e l'altro.
  attesa_stop:
    min: 5
    max: 60
    step: 1

  #Attende tot MINUTI tra una riattivazione e l'altra per dare il tempo al carico di riprendere il suo normale assorbimento
  attesa_start:
    min: 1
    max: 60
    step: 1


input_select:
# Drop-down per la configurazione di PowerControl. L'elenco di interruttori e sensori viene aggiornato all'avvio di HA.
  lista_carichi:
    name: Lista potenza carichi
    options:
      - Seleziona

# Selezione del sensore di  potenza utilizzata. Se non configurato, viene utilizzato il sensore virtuale 
  potenza_carichi:
    name: Sensore potenza carichi
    options:
      - Seleziona

# Interruttore carichi
  carico_1_switch:
    name: Interruttore Carico Priorità 1
    options:
      - Seleziona
  carico_2_switch:
    name: Interruttore Carico Priorità 2
    options:
      - Seleziona
  carico_3_switch:
    name: Interruttore Carico Priorità 3
    options:
      - Seleziona
  carico_4_switch:
    name: Interruttore Carico Priorità 4
    options:
      - Seleziona
  carico_5_switch:
    name: Interruttore Carico Priorità 5
    options:
      - Seleziona
  carico_6_switch:
    name: Interruttore Carico Priorità 6
    options:
      - Seleziona
  carico_7_switch:
    name: Interruttore Carico Priorità 7
    options:
      - Seleziona
  carico_8_switch:
    name: Interruttore Carico Priorità 8
    options:
      - Seleziona
  carico_9_switch:
    name: Interruttore Carico Priorità 9
    options:
      - Seleziona
  carico_10_switch:
    name: Interruttore Carico Priorità 10
    options:
      - Seleziona
  carico_11_switch:
    name: Interruttore Carico Priorità 11
    options:
      - Seleziona
  carico_12_switch:
    name: Interruttore Carico Priorità 12
    options:
      - Seleziona
  carico_13_switch:
    name: Interruttore Carico Priorità 13
    options:
      - Seleziona
  carico_14_switch:
    name: Interruttore Carico Priorità 14
    options:
      - Seleziona
  carico_15_switch:
    name: Interruttore Carico Priorità 15
    options:
      - Seleziona
  carico_16_switch:
    name: Interruttore Carico Priorità 16
    options:
      - Seleziona
  carico_17_switch:
    name: Interruttore Carico Priorità 17
    options:
      - Seleziona
  carico_18_switch:
    name: Interruttore Carico Priorità 18
    options:
      - Seleziona
  carico_19_switch:
    name: Interruttore Carico Priorità 19
    options:
      - Seleziona
  carico_20_switch:
    name: Interruttore Carico Priorità 20
    options:
      - Seleziona

# Sensori potenza carichi
  carico_1_potenza:
    name: Sensore Carico Priorità 1
    options:
      - Seleziona
  carico_2_potenza:
    name: Sensore Carico Priorità 2
    options:
      - Seleziona
  carico_3_potenza:
    name: Sensore Carico Priorità 3
    options:
      - Seleziona
  carico_4_potenza:
    name: Sensore Carico Priorità 4
    options:
      - Seleziona
  carico_5_potenza:
    name: Sensore Carico Priorità 5
    options:
      - Seleziona
  carico_6_potenza:
    name: Sensore Carico Priorità 6
    options:
      - Seleziona
  carico_7_potenza:
    name: Sensore Carico Priorità 7
    options:
      - Seleziona
  carico_8_potenza:
    name: Sensore Carico Priorità 8
    options:
      - Seleziona
  carico_9_potenza:
    name: Sensore Carico Priorità 9
    options:
      - Seleziona
  carico_10_potenza:
    name: Sensore Carico Priorità 10
    options:
      - Seleziona
  carico_11_potenza:
    name: Sensore Carico Priorità 11
    options:
      - Seleziona
  carico_12_potenza:
    name: Sensore Carico Priorità 12
    options:
      - Seleziona
  carico_13_potenza:
    name: Sensore Carico Priorità 13
    options:
      - Seleziona
  carico_14_potenza:
    name: Sensore Carico Priorità 14
    options:
      - Seleziona
  carico_15_potenza:
    name: Sensore Carico Priorità 15
    options:
      - Seleziona
  carico_16_potenza:
    name: Sensore Carico Priorità 16
    options:
      - Seleziona
  carico_17_potenza:
    name: Sensore Carico Priorità 17
    options:
      - Seleziona
  carico_18_potenza:
    name: Sensore Carico Priorità 18
    options:
      - Seleziona
  carico_19_potenza:
    name: Sensore Carico Priorità 19
    options:
      - Seleziona
  carico_20_potenza:
    name: Sensore Carico Priorità 20
    options:
      - Seleziona

timer:
  tempo_riattivazione:
    duration: "00:00:00"

#################################################################
####################### AUTOMAZIONI #############################
#################################################################
automation:

# All'avvio di HA, aggiorna gli input_slider con la lista delle entità per i campi di configurazione.
# All'avvio di HA attende che l'automazione "Popola entità" termini, poi carica la configurazione di interruttori
# e sensori di potenza.
  - id: 'powercontrol_configurazione_carica'
    alias: PowerControl - Configurazione - Carica
    mode: single
    trigger:
      - platform: homeassistant
        event: start
        id: start
      - platform: event
        id: reload
        event_type:
          - automation_reloaded
    action:
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Configurazione - Carica - Lancio script configurazione"
      - choose:
        - conditions:
            - condition: trigger
              id: start
          sequence:
            - service: system_log.write
              data_template:
                level: debug
                logger: homeassistant.components.pc
                message: "HA_PowerControl Versione: 3.60.b1"
            - service: script.powercontrol_configurazione_popola_entita
        - conditions:
            - condition: trigger
              id: reload
          sequence:
            - delay:
                minutes: 1
            - service: script.powercontrol_configurazione_popola_entita
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Configurazione - Carica - Fine script configurazione"

# Automazione che si triggera nel momento in cui la la potenza utilizzata supera la potenza massima impostata.
# Agisce dopo TOT secondi dal superamento del limite, avvia lo script di distacco ed invia notifica di intervento.
# Ripete l'avvio dello script di distacco finché la potenza impegnata non rientra nel limite.
  - id: 'powercontrol_carichi_stop'
    alias: PowerControl - Carichi Stop
    mode: single
    description: ''
    trigger:
    - platform: template
      value_template: "{{ states(states('input_text.potenza_carichi'))|int(default=0) > states('sensor.potenza_massima_immediato')|int(default=0) }}"
      for:
        seconds: "{{ states('input_number.tempo_stop_immediato')|int(default=30) }}"
      id: immediato
    - platform: template
      value_template: "{{ states(states('input_text.potenza_carichi'))|int(default=0) > states('sensor.potenza_massima_ritardato')|int(default=0) }}"
      for:
        minutes: "{{ states('input_number.tempo_stop_ritardato')|int(default=170) }}"
      id: ritardato
    condition:
    - condition: state
      entity_id: input_boolean.attiva_power_control
      state: 'on'
    action:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Automazione Carichi Stop triggerata: Potenza carichi ({{ states(states('input_text.potenza_carichi'))|int }} > {{states('sensor.potenza_massima_immediato')|int}}/{{states('sensor.potenza_massima_ritardato')|int}}))"
    - choose:
      - conditions:
          - condition: trigger
            id: immediato
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.sensore_trigger
          - service: system_log.write
            data_template:
              level: debug
              logger: homeassistant.components.pc
              message: "Automazione Carichi Stop triggerata: Tipo di innesco Immediato"
      - conditions:
          - condition: trigger
            id: ritardato
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.sensore_trigger
          - service: system_log.write
            data_template:
              level: debug
              logger: homeassistant.components.pc
              message: "Automazione Carichi Stop triggerata: Tipo di innesco Ritardato"
    - repeat:
        sequence:
          - condition: template
            value_template: >
              {{
                ((states(states('input_text.potenza_carichi'))|int(default=0) > states('sensor.potenza_massima_ritardato')|int(default=0)) and states('input_boolean.sensore_trigger') == "off") or
                ((states(states('input_text.potenza_carichi'))|int(default=0) > states('sensor.potenza_massima_immediato')|int(default=0)) and states('input_boolean.sensore_trigger') == "on")
              }}
          - service: system_log.write
            data_template:
              level: debug
              logger: homeassistant.components.pc
              message: "Avviato script stop carichi: potenza carichi {{ states(states('input_text.potenza_carichi'))|int }} Tipo: - {{ states('input_boolean.sensore_trigger') }}"
          - service: script.stop_carichi_generale
#          - if:
#              - condition: template
#                value_template: "{{ states(states('input_text.potenza_carichi'))|int(default=0) <= states('sensor.potenza_massima_immediato')|int(default=0) }}"
#            then:
#              - service: input_boolean.turn_off
#                target:
#                  entity_id: input_boolean.sensore_trigger
        until:
          - condition: template
            value_template: >
              {{
                ((states(states('input_text.potenza_carichi'))|int(default=0) > states('sensor.potenza_massima_ritardato')|int(default=0)) and states('input_boolean.sensore_trigger') == "off") or
                ((states(states('input_text.potenza_carichi'))|int(default=0) > states('sensor.potenza_massima_immediato')|int(default=0)) and states('input_boolean.sensore_trigger') == "on")
                or repeat.index == 5
              }}
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.sensore_trigger

# Se il limite di potenza è superato, fermo il timer.
  - id: 'powercontrol_timer_stop'
    alias: PowerControl - Timer Stop
    description: ''
    mode: single
    trigger:
    - platform: template
      value_template: "{{ states(states('input_text.potenza_carichi'))|int(default=0) > states('sensor.potenza_massima_ritardato')|int(default=0) }}"
    action:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Automazione stop timer triggerata: Potenza carichi+sospesa ({{ states(states('input_text.potenza_carichi'))|int + states('sensor.potenza_carichi_sospesa')|int}}) < Potenza massima ({{states('sensor.potenza_massima_ritardato')|int }}) "
    - service: timer.cancel
      data:
        entity_id: timer.tempo_riattivazione

# Se il limite di potenza è rispettato, avvio il timer.
  - id: 'powercontrol_timer_start'
    alias: PowerControl - Timer Start
    description: ''
    mode: single
    trigger:
    - platform: template
      value_template: "{{ ((states(states('input_text.potenza_carichi'))|int(default=0) + states('sensor.potenza_carichi_sospesa')|int(default=0)) < states('sensor.potenza_massima_ritardato')|int(default=0)) and (states('sensor.potenza_carichi_sospesa')|int(default=0) > 0) }}"
    action:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Automazione start timer triggerata: Potenza carichi+sospesa ({{ states(states('input_text.potenza_carichi'))|int + states('sensor.potenza_carichi_sospesa')|int}}) < Potenza massima ({{states('sensor.potenza_massima_ritardato')|int }}) "
    - service: timer.start
      data_template:
        duration: 00:{{ states('input_number.tempo_start') | int }}:00
        entity_id: timer.tempo_riattivazione


# Se per TOT minuti il limite di potenza è rispettato, avvia lo script di riattivazione dei carichi fino a che la potenza "sospesa" non è zero.
  - id: 'powercontrol_carichi_start'
    alias: PowerControl - Carichi Start
    description: ''
    mode: single
    trigger:
    - platform: template
      value_template: "{{ ((states(states('input_text.potenza_carichi'))|int(default=0) + states('sensor.potenza_carichi_sospesa')|int(default=0)) < states('sensor.potenza_massima_ritardato')|int(default=0)) and (states('sensor.potenza_carichi_sospesa')|int(default=0) > 0) }}"
      for:
        minutes: "{{ states('input_number.tempo_start')|int(default=5) }}"
    condition:
    - condition: state
      entity_id: input_boolean.attiva_power_control
      state: 'on'
    - condition: template
      value_template: "{{ states('sensor.potenza_carichi_sospesa')|int(default=0) > 0 }}"
    action:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Automazione start carichi triggerata: Potenza carichi+sospesa ({{ states(states('input_text.potenza_carichi'))|int + states('sensor.potenza_carichi_sospesa')|int }}) < Potenza massima ({{states('sensor.potenza_massima_ritardato')|int }}) "
    - repeat:
        until:
        - condition: template
          value_template: "{{ states('sensor.potenza_carichi_sospesa')|int(default=0) > 0 or repeat.index == 5 }}"
        sequence:
        - condition: template
          value_template: "{{ states('sensor.potenza_carichi_sospesa')|int(default=0) > 0 }}"
        - service: system_log.write
          data_template:
            level: debug
            logger: homeassistant.components.pc
            message: "Avvio script start carichi: sospesa ({{ states('sensor.potenza_carichi_sospesa')|int }})>0 "
        - service: script.start_carichi_generale

# Controlla se un carico viene riacceso manualmente, cioè se il relativo interruttore viene attivato dall'utente,
# e resetta la relativa potenza sospesa.
  - id: 'powercontrol_watchdog_sospesa'
    alias: PowerControl - Controllo su riattivazione manuale
    mode: single

    description: >-
      Monitora gli switch dei carichi e, se uno di questi è attivo ma la sua potenza
      sospesa è diversa da 0, la porta a zero.
    trigger:
      - platform: template
        value_template: >
              {{
                ( states(states('input_text.carico_1_switch')) == 'on' and states('input_number.potenza_1_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_2_switch')) == 'on' and states('input_number.potenza_2_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_3_switch')) == 'on' and states('input_number.potenza_3_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_4_switch')) == 'on' and states('input_number.potenza_4_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_5_switch')) == 'on' and states('input_number.potenza_5_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_6_switch')) == 'on' and states('input_number.potenza_6_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_7_switch')) == 'on' and states('input_number.potenza_7_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_8_switch')) == 'on' and states('input_number.potenza_8_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_9_switch')) == 'on' and states('input_number.potenza_9_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_10_switch')) == 'on' and states('input_number.potenza_10_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_11_switch')) == 'on' and states('input_number.potenza_11_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_12_switch')) == 'on' and states('input_number.potenza_12_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_13_switch')) == 'on' and states('input_number.potenza_13_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_14_switch')) == 'on' and states('input_number.potenza_14_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_15_switch')) == 'on' and states('input_number.potenza_15_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_16_switch')) == 'on' and states('input_number.potenza_16_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_17_switch')) == 'on' and states('input_number.potenza_17_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_18_switch')) == 'on' and states('input_number.potenza_18_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_19_switch')) == 'on' and states('input_number.potenza_19_sospesa')|int(default=0) > 0 ) or
                ( states(states('input_text.carico_20_switch')) == 'on' and states('input_number.potenza_20_sospesa')|int(default=0) > 0 )
              }}
        for:
          seconds: 5
    condition: []
    action:
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: Automazione Check riattivazione manuale - Avvio
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: >
            Automazione Check riattivazione manuale:
            {% if states(states('input_text.carico_1_switch')) == 'on' and states('input_number.potenza_1_sospesa')|int(default=0) > 0 %}Carico 1: {{states('input_number.potenza_1_sospesa')|int }}W
            {% elif states(states('input_text.carico_2_switch')) == 'on' and states('input_number.potenza_2_sospesa')|int(default=0) > 0 %}Carico 2: {{states('input_number.potenza_2_sospesa')|int }}W
            {% elif states(states('input_text.carico_3_switch')) == 'on' and states('input_number.potenza_3_sospesa')|int(default=0) > 0 %}Carico 3: {{states('input_number.potenza_3_sospesa')|int }}W
            {% elif states(states('input_text.carico_4_switch')) == 'on' and states('input_number.potenza_4_sospesa')|int(default=0) > 0 %}Carico 4: {{states('input_number.potenza_4_sospesa')|int }}W
            {% elif states(states('input_text.carico_5_switch')) == 'on' and states('input_number.potenza_5_sospesa')|int(default=0) > 0 %}Carico 5: {{states('input_number.potenza_5_sospesa')|int }}W
            {% elif states(states('input_text.carico_6_switch')) == 'on' and states('input_number.potenza_6_sospesa')|int(default=0) > 0 %}Carico 6: {{states('input_number.potenza_6_sospesa')|int }}W
            {% elif states(states('input_text.carico_7_switch')) == 'on' and states('input_number.potenza_7_sospesa')|int(default=0) > 0 %}Carico 7: {{states('input_number.potenza_7_sospesa')|int }}W
            {% elif states(states('input_text.carico_8_switch')) == 'on' and states('input_number.potenza_8_sospesa')|int(default=0) > 0 %}Carico 8: {{states('input_number.potenza_8_sospesa')|int }}W
            {% elif states(states('input_text.carico_9_switch')) == 'on' and states('input_number.potenza_9_sospesa')|int(default=0) > 0 %}Carico 9: {{states('input_number.potenza_9_sospesa')|int }}W
            {% elif states(states('input_text.carico_10_switch')) == 'on' and states('input_number.potenza_10_sospesa')|int(default=0) > 0 %}Carico 10: {{states('input_number.potenza_10_sospesa')|int }}W
            {% elif states(states('input_text.carico_11_switch')) == 'on' and states('input_number.potenza_11_sospesa')|int(default=0) > 0 %}Carico 11: {{states('input_number.potenza_11_sospesa')|int }}W
            {% elif states(states('input_text.carico_12_switch')) == 'on' and states('input_number.potenza_12_sospesa')|int(default=0) > 0 %}Carico 12: {{states('input_number.potenza_12_sospesa')|int }}W
            {% elif states(states('input_text.carico_13_switch')) == 'on' and states('input_number.potenza_13_sospesa')|int(default=0) > 0 %}Carico 13: {{states('input_number.potenza_13_sospesa')|int }}W
            {% elif states(states('input_text.carico_14_switch')) == 'on' and states('input_number.potenza_14_sospesa')|int(default=0) > 0 %}Carico 14: {{states('input_number.potenza_14_sospesa')|int }}W
            {% elif states(states('input_text.carico_15_switch')) == 'on' and states('input_number.potenza_15_sospesa')|int(default=0) > 0 %}Carico 15: {{states('input_number.potenza_15_sospesa')|int }}W
            {% elif states(states('input_text.carico_16_switch')) == 'on' and states('input_number.potenza_16_sospesa')|int(default=0) > 0 %}Carico 16: {{states('input_number.potenza_16_sospesa')|int }}W
            {% elif states(states('input_text.carico_17_switch')) == 'on' and states('input_number.potenza_17_sospesa')|int(default=0) > 0 %}Carico 17: {{states('input_number.potenza_17_sospesa')|int }}W
            {% elif states(states('input_text.carico_18_switch')) == 'on' and states('input_number.potenza_18_sospesa')|int(default=0) > 0 %}Carico 18: {{states('input_number.potenza_18_sospesa')|int }}W
            {% elif states(states('input_text.carico_19_switch')) == 'on' and states('input_number.potenza_19_sospesa')|int(default=0) > 0 %}Carico 19: {{states('input_number.potenza_19_sospesa')|int }}W
            {% elif states(states('input_text.carico_20_switch')) == 'on' and states('input_number.potenza_20_sospesa')|int(default=0) > 0 %}Carico 20: {{states('input_number.potenza_20_sospesa')|int }}W
            {% else %}none
            {% endif %}
      - service: input_number.set_value
        data_template:
          value: 0
          entity_id: "{% if states(states('input_text.carico_1_switch')) == 'on' and states('input_number.potenza_1_sospesa')|int(default=0) > 0 %}input_number.potenza_1_sospesa
          {% elif states(states('input_text.carico_2_switch')) == 'on' and states('input_number.potenza_2_sospesa')|int(default=0) > 0 %}input_number.potenza_2_sospesa
          {% elif states(states('input_text.carico_3_switch')) == 'on' and states('input_number.potenza_3_sospesa')|int(default=0) > 0 %}input_number.potenza_3_sospesa
          {% elif states(states('input_text.carico_4_switch')) == 'on' and states('input_number.potenza_4_sospesa')|int(default=0) > 0 %}input_number.potenza_4_sospesa
          {% elif states(states('input_text.carico_5_switch')) == 'on' and states('input_number.potenza_5_sospesa')|int(default=0) > 0 %}input_number.potenza_5_sospesa
          {% elif states(states('input_text.carico_6_switch')) == 'on' and states('input_number.potenza_6_sospesa')|int(default=0) > 0 %}input_number.potenza_6_sospesa
          {% elif states(states('input_text.carico_7_switch')) == 'on' and states('input_number.potenza_7_sospesa')|int(default=0) > 0 %}input_number.potenza_7_sospesa
          {% elif states(states('input_text.carico_8_switch')) == 'on' and states('input_number.potenza_8_sospesa')|int(default=0) > 0 %}input_number.potenza_8_sospesa
          {% elif states(states('input_text.carico_9_switch')) == 'on' and states('input_number.potenza_9_sospesa')|int(default=0) > 0 %}input_number.potenza_9_sospesa
          {% elif states(states('input_text.carico_10_switch')) == 'on' and states('input_number.potenza_10_sospesa')|int(default=0) > 0 %}input_number.potenza_10_sospesa
          {% elif states(states('input_text.carico_11_switch')) == 'on' and states('input_number.potenza_11_sospesa')|int(default=0) > 0 %}input_number.potenza_11_sospesa
          {% elif states(states('input_text.carico_12_switch')) == 'on' and states('input_number.potenza_12_sospesa')|int(default=0) > 0 %}input_number.potenza_12_sospesa
          {% elif states(states('input_text.carico_13_switch')) == 'on' and states('input_number.potenza_13_sospesa')|int(default=0) > 0 %}input_number.potenza_13_sospesa
          {% elif states(states('input_text.carico_14_switch')) == 'on' and states('input_number.potenza_14_sospesa')|int(default=0) > 0 %}input_number.potenza_14_sospesa
          {% elif states(states('input_text.carico_15_switch')) == 'on' and states('input_number.potenza_15_sospesa')|int(default=0) > 0 %}input_number.potenza_15_sospesa
          {% elif states(states('input_text.carico_16_switch')) == 'on' and states('input_number.potenza_16_sospesa')|int(default=0) > 0 %}input_number.potenza_16_sospesa
          {% elif states(states('input_text.carico_17_switch')) == 'on' and states('input_number.potenza_17_sospesa')|int(default=0) > 0 %}input_number.potenza_17_sospesa
          {% elif states(states('input_text.carico_18_switch')) == 'on' and states('input_number.potenza_18_sospesa')|int(default=0) > 0 %}input_number.potenza_18_sospesa
          {% elif states(states('input_text.carico_19_switch')) == 'on' and states('input_number.potenza_19_sospesa')|int(default=0) > 0 %}input_number.potenza_11_sospesa
          {% elif states(states('input_text.carico_20_switch')) == 'on' and states('input_number.potenza_20_sospesa')|int(default=0) > 0 %}input_number.potenza_20_sospesa
          {% else %}none
          {% endif %}"
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: Automazione Check riattivazione manuale - Fine

# All'avvio o se PowerControl viene disattivato, resetta i carichi sospesi.
  - id: 'powercontrol_reset_sospesa'
    alias: PowerControl - Reset disattivazione
    mode: single
    trigger:
      - platform: homeassistant
        event: start
        id: start
      - platform: state
        entity_id:
          - input_boolean.attiva_power_control
        to: "off"
    action:
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Reset sospesa - Avvio"

      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_1_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_2_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_3_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_4_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_5_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_6_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_7_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_8_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_9_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_10_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_11_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_12_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_13_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_14_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_15_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_16_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_17_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_18_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_19_sospesa
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.potenza_20_sospesa

      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Reset sospesa - Fine"


#################################################################
######################### SCRIPT  ###############################
#################################################################

script:

# I carichi vengono disattivati secondo l'ordine numerico inverso (da minore priorità a maggiore).
# Attende il completamente di uno script prima di passare al successivo.
  stop_carichi_generale:
    alias: PowerControl - Stop carichi generale
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carichi generale"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 20"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_20_potenza')}}"
        switch: "{{states('input_text.carico_20_switch')}}"
        sospesa: "input_number.potenza_20_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 19"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_19_potenza')}}"
        switch: "{{states('input_text.carico_19_switch')}}"
        sospesa: "input_number.potenza_19_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 18"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_18_potenza')}}"
        switch: "{{states('input_text.carico_18_switch')}}"
        sospesa: "input_number.potenza_18_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 17"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_17_potenza')}}"
        switch: "{{states('input_text.carico_17_switch')}}"
        sospesa: "input_number.potenza_17_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 16"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_16_potenza')}}"
        switch: "{{states('input_text.carico_16_switch')}}"
        sospesa: "input_number.potenza_16_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 15"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_15_potenza')}}"
        switch: "{{states('input_text.carico_15_switch')}}"
        sospesa: "input_number.potenza_15_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 14"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_14_potenza')}}"
        switch: "{{states('input_text.carico_14_switch')}}"
        sospesa: "input_number.potenza_14_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 13"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_13_potenza')}}"
        switch: "{{states('input_text.carico_13_switch')}}"
        sospesa: "input_number.potenza_13_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 12"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_12_potenza')}}"
        switch: "{{states('input_text.carico_12_switch')}}"
        sospesa: "input_number.potenza_12_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 11"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_11_potenza')}}"
        switch: "{{states('input_text.carico_11_switch')}}"
        sospesa: "input_number.potenza_11_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 10"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_10_potenza')}}"
        switch: "{{states('input_text.carico_10_switch')}}"
        sospesa: "input_number.potenza_10_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 9"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_9_potenza')}}"
        switch: "{{states('input_text.carico_9_switch')}}"
        sospesa: "input_number.potenza_9_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 8"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_8_potenza')}}"
        switch: "{{states('input_text.carico_8_switch')}}"
        sospesa: "input_number.potenza_8_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 7"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_7_potenza')}}"
        switch: "{{states('input_text.carico_7_switch')}}"
        sospesa: "input_number.potenza_7_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 6"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_6_potenza')}}"
        switch: "{{states('input_text.carico_6_switch')}}"
        sospesa: "input_number.potenza_6_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 5"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_5_potenza')}}"
        switch: "{{states('input_text.carico_5_switch')}}"
        sospesa: "input_number.potenza_5_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 4"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_4_potenza')}}"
        switch: "{{states('input_text.carico_4_switch')}}"
        sospesa: "input_number.potenza_4_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 3"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_3_potenza')}}"
        switch: "{{states('input_text.carico_3_switch')}}"
        sospesa: "input_number.potenza_3_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 2"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_2_potenza')}}"
        switch: "{{states('input_text.carico_2_switch')}}"
        sospesa: "input_number.potenza_2_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 1"
    - service: script.stop_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_1_potenza')}}"
        switch: "{{states('input_text.carico_1_switch')}}"
        sospesa: "input_number.potenza_1_sospesa"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Fine script stop carichi generale"
    mode: single

# I carichi vengono riattivati secondo l'ordine numerico (da maggiore priorità a minore priorità)
# Attende il completamente di uno script prima di passare al successivo.
  start_carichi_generale:
    alias: PowerControl - Start carichi Generale
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carichi generale"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 1"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_1_potenza')}}"
        switch: "{{states('input_text.carico_1_switch')}}"
        sospesa: "input_number.potenza_1_sospesa"
        riavvio: "input_boolean.mantini_spento_1"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 2"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_2_potenza')}}"
        switch: "{{states('input_text.carico_2_switch')}}"
        sospesa: "input_number.potenza_2_sospesa"
        riavvio: "input_boolean.mantini_spento_2"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 3"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_3_potenza')}}"
        switch: "{{states('input_text.carico_3_switch')}}"
        sospesa: "input_number.potenza_3_sospesa"
        riavvio: "input_boolean.mantini_spento_3"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 4"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_4_potenza')}}"
        switch: "{{states('input_text.carico_4_switch')}}"
        sospesa: "input_number.potenza_4_sospesa"
        riavvio: "input_boolean.mantini_spento_4"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 5"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_5_potenza')}}"
        switch: "{{states('input_text.carico_5_switch')}}"
        sospesa: "input_number.potenza_5_sospesa"
        riavvio: "input_boolean.mantini_spento_5"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 6"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_6_potenza')}}"
        switch: "{{states('input_text.carico_6_switch')}}"
        sospesa: "input_number.potenza_6_sospesa"
        riavvio: "input_boolean.mantini_spento_6"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 7"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_7_potenza')}}"
        switch: "{{states('input_text.carico_7_switch')}}"
        sospesa: "input_number.potenza_7_sospesa"
        riavvio: "input_boolean.mantini_spento_7"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 8"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_8_potenza')}}"
        switch: "{{states('input_text.carico_8_switch')}}"
        sospesa: "input_number.potenza_8_sospesa"
        riavvio: "input_boolean.mantini_spento_8"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 9"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_9_potenza')}}"
        switch: "{{states('input_text.carico_9_switch')}}"
        sospesa: "input_number.potenza_9_sospesa"
        riavvio: "input_boolean.mantini_spento_9"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 10"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_10_potenza')}}"
        switch: "{{states('input_text.carico_10_switch')}}"
        sospesa: "input_number.potenza_10_sospesa"
        riavvio: "input_boolean.mantini_spento_10"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 11"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_11_potenza')}}"
        switch: "{{states('input_text.carico_11_switch')}}"
        sospesa: "input_number.potenza_11_sospesa"
        riavvio: "input_boolean.mantini_spento_11"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 12"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_12_potenza')}}"
        switch: "{{states('input_text.carico_12_switch')}}"
        sospesa: "input_number.potenza_12_sospesa"
        riavvio: "input_boolean.mantini_spento_12"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 13"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_13_potenza')}}"
        switch: "{{states('input_text.carico_13_switch')}}"
        sospesa: "input_number.potenza_13_sospesa"
        riavvio: "input_boolean.mantini_spento_13"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 14"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_14_potenza')}}"
        switch: "{{states('input_text.carico_14_switch')}}"
        sospesa: "input_number.potenza_14_sospesa"
        riavvio: "input_boolean.mantini_spento_14"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 15"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_15_potenza')}}"
        switch: "{{states('input_text.carico_15_switch')}}"
        sospesa: "input_number.potenza_15_sospesa"
        riavvio: "input_boolean.mantini_spento_15"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 16"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_16_potenza')}}"
        switch: "{{states('input_text.carico_16_switch')}}"
        sospesa: "input_number.potenza_16_sospesa"
        riavvio: "input_boolean.mantini_spento_16"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 17"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_17_potenza')}}"
        switch: "{{states('input_text.carico_17_switch')}}"
        sospesa: "input_number.potenza_17_sospesa"
        riavvio: "input_boolean.mantini_spento_17"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 18"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_18_potenza')}}"
        switch: "{{states('input_text.carico_18_switch')}}"
        sospesa: "input_number.potenza_18_sospesa"
        riavvio: "input_boolean.mantini_spento_18"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 19"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_19_potenza')}}"
        switch: "{{states('input_text.carico_19_switch')}}"
        sospesa: "input_number.potenza_19_sospesa"
        riavvio: "input_boolean.mantini_spento_19"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 20"
    - service: script.start_carichi_singolo
      data_template:
        potenza: "{{states('input_text.carico_20_potenza')}}"
        switch: "{{states('input_text.carico_20_switch')}}"
        sospesa: "input_number.potenza_20_sospesa"
        riavvio: "input_boolean.mantini_spento_20"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Fine script start carichi generale"
    mode: single

#################################################################
###################### STOP CARICHI #############################
#################################################################

# Avvia il distacco del carico.
# Verifica che il carico sia configurato come sensore di potenza e come interruttore.
# Controlla se la potenza massima è superata, se il carico è acceso (potenza impegnata > 10W).
# Salva la potenza attualmente utilizzata nel relativo valore "sospesa".
# Spegne l'interruttore a monte del carico ed invia la notifica. Attende TOT secondi prima di procedere col carico successivo.

  stop_carichi_singolo:
    alias: PowerControl - Stop Carico Singolo
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Avvio"
    # Controlla se il sensore potenza del carico è impostato    
    - condition: template
      value_template: "{{ potenza != 'Seleziona' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 1 - Ok"

    # Controlla se il sensore potenza del carico è disponibile    
    - condition: template
      value_template: "{{ states(potenza) != 'unavailable' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 1.5 - Ok"

    # Controlla se l'interruttore del carico è impostato
    - condition: template
      value_template: "{{ switch != 'Seleziona' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 2 - Ok"

    # Controlla se l'interruttore del carico è disponibile
    - condition: template
      value_template: "{{ states(switch) != 'unavailable' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 2.5 - Ok"

    # Controlla se la potenza in uso è maggiore dei limiti impostati
    - condition: template
      value_template: >
        {{
          ((states(states('input_text.potenza_carichi'))|int(default=0) > states('sensor.potenza_massima_ritardato')|int(default=0)) and states('input_boolean.sensore_trigger') == "off") or
          ((states(states('input_text.potenza_carichi'))|int(default=0) > states('sensor.potenza_massima_immediato')|int(default=0)) and states('input_boolean.sensore_trigger') == "on")
        }}
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 3 - Ok {{ states(states('input_text.potenza_carichi'))|int }}W"
    # Controlla se il carico è attualmente in uso 
    - condition: template
      value_template: "{{ states(potenza)|int(default=0) > 10 }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 4 - Ok"
    #Salvo potenza in uso dal carico sul relativo sensore sospesa
    - service: input_number.set_value
      data_template:
        value: "{{ states(potenza)|int }}"
        entity_id: "{{sospesa}}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Spostata potenza da carico {{ states(potenza)|int }} a sospesa {{ states(sospesa)|int }} (dovrebbero essere uguali)."
    # Spengo il carico
    - service_template: switch.turn_off
      data_template:
        entity_id: "{{ switch }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Spento carico"
    #Invio Notifica
    - service: notify.tutti
      continue_on_error: true
      data:
        title: Limite potenza superato
        message: "{{ state_attr(switch,'friendly_name') }} disattivato."
        data:
          push:
            thread-id: "powercontrol"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Inviata notifica. Attendo {{ states('input_number.attesa_stop') }} secondi "

    # Attendo prima di passare al prossimo carico da distaccare.
    - delay:
        seconds: "{{ states('input_number.attesa_stop') }}"
    mode: single



#################################################################
###################### START CARICHI ############################
#################################################################

# Script per la riattivazione dei carichi.
# Controlla che il carico sia abilitato alla riattivazzione
# Verifica che il carico si aconfigurato come seonsore di potenza e come interruttore.
# Controlla che il carico sia stato disattivato (potenza in attesa)
# Controlla che il limite di potenza venga rispettato.
# Controlla anche se riattivando il carico (ipotizzando un consumo pari a quello che aveva all'atto della disattivazione) 
# non supera il valore massimo.
# Quest'ultimo controllo serve ad evitare che si riattacchi un carico che poi si ristacchi dopo pochi secondi perché ha 
# causato un nuovo sforamento del limite.
# Imposta il relativo valore "sospesa" a zero, riattiva l'interruttore ed invia una notifica di riattivazione.
# Infine attende TOT minuti  prima di passare al carico successivo.

  start_carichi_singolo:
    alias: PowerControl - Start Carico Singolo
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Avvio"

    # Controllo se il sensore potenza del carico è stato configurato
    - condition: template
      value_template: "{{ potenza != 'Seleziona' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 1 ok"

    # Controlla se il sensore potenza del carico è disponibile    
    - condition: template
      value_template: "{{ states(potenza) != 'unavailable' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 1.5 - Ok"

    # Controllo se l'interruttore del carico è stato configurato
    - condition: template
      value_template: "{{ switch != 'Seleziona' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 2 ok"

    # Controlla se l'interruttore del carico è disponibile
    - condition: template
      value_template: "{{ states(switch) != 'unavailable' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 2.5 - Ok"

    # Controllo che il carico sia abilitato alla riattivazione
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 2.75 {{states(riavvio)}}"
    - condition: template
      value_template: "{{ states(riavvio) == 'off' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 2.75 ok"

    # Verifica se la potenza sospesa del carico è maggiore di 0 (in questo caso il carico è stato spento dal contollo carichi)
    - condition: template
      value_template: "{{ states(sospesa)|int(default=0) > 0 }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 3 ok"
    # Verifico che la potenza in uso sia inferiore alla potenza massima ritardato.
    - condition: template
      value_template: "{{ states(states('input_text.potenza_carichi'))|int(default=0) < states('sensor.potenza_massima_ritardato')|int(default=0)}}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 4 ok"
    #Controlla se, riattivanado il carico, non si superi nuovamente il limite di potenza.
    - condition: template
      value_template: "{{ states(states('input_text.potenza_carichi'))|int(default=0) + states(sospesa)|int(default=0) < states('sensor.potenza_massima_ritardato')|int(default=0) }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 5 ok"
    # Imposta la potenza sospesa del carico a zero.
    - service: input_number.set_value
      data_template:
        value: 0
        entity_id: "{{sospesa}}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Resettata potenza sospesa"
    #Accendo il carico
    - service_template: switch.turn_on
      data_template:
        entity_id: "{{ switch }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Attivato interruttore"
    # Invio notifica
    - service: notify.tutti
      continue_on_error: true
      data:
        title: Limite potenza rientrato
        message: "{{ state_attr(switch,'friendly_name') }} Riattivato"
        data:
          push:
            thread-id: "powercontrol"
    #Resetto il timer
    - service: timer.start
      data_template:
        duration: 00:{{ states('input_number.attesa_start') | int }}:00
        entity_id: timer.tempo_riattivazione

    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Inviata notifica. Attendo {{ states('input_number.attesa_start') }} minuti"
    - delay:
        minutes: "{{ states('input_number.attesa_start') }}"
    mode: single



#################################################################
###################### CONFIGURAZIONE ###########################
#################################################################

# All'avvio di HA, aggiorna gli input_slider con la lista delle entità per i campi di configurazione.
  powercontrol_configurazione_popola_entita:
    alias: PowerControl - Configurazione - Popola entità
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Configurazione - Popola entità - Avvio script python"
    - choose:
      - conditions:
          - condition: state
            entity_id: input_boolean.selezione_script_python
            state: 'off'
        sequence:
          - service: python_script.update_entities
      - conditions:
          - condition: state
            entity_id: input_boolean.selezione_script_python
            state: 'on'
        sequence:
          - service: python_script.update_entities_new
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Configurazione - Popola entità - Script python terminato"

    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Configurazione - Carica - Carico input_select dai relativi input_text"
    - service: input_select.select_option
      data:
        entity_id: input_select.potenza_carichi
        option: "{{ states('input_text.potenza_carichi') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_1_potenza
        option: "{{ states('input_text.carico_1_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_2_potenza
        option: "{{ states('input_text.carico_2_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_3_potenza
        option: "{{ states('input_text.carico_3_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_4_potenza
        option: "{{ states('input_text.carico_4_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_5_potenza
        option: "{{ states('input_text.carico_5_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_6_potenza
        option: "{{ states('input_text.carico_6_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_7_potenza
        option: "{{ states('input_text.carico_7_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_8_potenza
        option: "{{ states('input_text.carico_8_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_9_potenza
        option: "{{ states('input_text.carico_9_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_10_potenza
        option: "{{ states('input_text.carico_10_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_11_potenza
        option: "{{ states('input_text.carico_11_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_12_potenza
        option: "{{ states('input_text.carico_12_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_13_potenza
        option: "{{ states('input_text.carico_13_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_14_potenza
        option: "{{ states('input_text.carico_14_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_15_potenza
        option: "{{ states('input_text.carico_15_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_16_potenza
        option: "{{ states('input_text.carico_16_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_17_potenza
        option: "{{ states('input_text.carico_17_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_18_potenza
        option: "{{ states('input_text.carico_18_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_19_potenza
        option: "{{ states('input_text.carico_19_potenza') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_20_potenza
        option: "{{ states('input_text.carico_20_potenza') }}"


    - service: input_select.select_option
      data:
        entity_id: input_select.carico_1_switch
        option: "{{ states('input_text.carico_1_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_2_switch
        option: "{{ states('input_text.carico_2_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_3_switch
        option: "{{ states('input_text.carico_3_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_4_switch
        option: "{{ states('input_text.carico_4_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_5_switch
        option: "{{ states('input_text.carico_5_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_6_switch
        option: "{{ states('input_text.carico_6_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_7_switch
        option: "{{ states('input_text.carico_7_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_8_switch
        option: "{{ states('input_text.carico_8_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_9_switch
        option: "{{ states('input_text.carico_9_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_10_switch
        option: "{{ states('input_text.carico_10_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_11_switch
        option: "{{ states('input_text.carico_11_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_12_switch
        option: "{{ states('input_text.carico_12_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_13_switch
        option: "{{ states('input_text.carico_13_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_14_switch
        option: "{{ states('input_text.carico_14_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_15_switch
        option: "{{ states('input_text.carico_15_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_16_switch
        option: "{{ states('input_text.carico_16_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_17_switch
        option: "{{ states('input_text.carico_17_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_18_switch
        option: "{{ states('input_text.carico_18_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_19_switch
        option: "{{ states('input_text.carico_19_switch') }}"
    - service: input_select.select_option
      data:
        entity_id: input_select.carico_20_switch
        option: "{{ states('input_text.carico_20_switch') }}"

    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Configurazione - Carica - Fine caricamento"

# Aggiorna gli input_slider con la lista delle entità per i campi di configurazione quando richiamato da pannello di configurazione
  powercontrol_configurazione_salva:
    alias: PowerControl - Configurazione - Salva
    sequence:
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Script Configurazione - Salva - Avvio automazione, attendo fine automazione powercontrol_configurazione_carica"
      - wait_template: "{{ state_attr('automation.powercontrol_configurazione_carica','current') == 0 }}"
      - service: system_log.write

        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Script Configurazione - Salva - Salvo input_select in input_text"
      - service: input_text.set_value
        data:
          entity_id: input_text.potenza_carichi
          value: "{{ states('input_select.potenza_carichi') }}"

      - service: input_text.set_value
        data:
          entity_id: input_text.carico_1_potenza
          value: "{{ states('input_select.carico_1_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_2_potenza
          value: "{{ states('input_select.carico_2_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_3_potenza
          value: "{{ states('input_select.carico_3_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_4_potenza
          value: "{{ states('input_select.carico_4_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_5_potenza
          value: "{{ states('input_select.carico_5_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_6_potenza
          value: "{{ states('input_select.carico_6_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_7_potenza
          value: "{{ states('input_select.carico_7_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_8_potenza
          value: "{{ states('input_select.carico_8_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_9_potenza
          value: "{{ states('input_select.carico_9_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_10_potenza
          value: "{{ states('input_select.carico_10_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_11_potenza
          value: "{{ states('input_select.carico_11_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_12_potenza
          value: "{{ states('input_select.carico_12_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_13_potenza
          value: "{{ states('input_select.carico_13_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_14_potenza
          value: "{{ states('input_select.carico_14_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_15_potenza
          value: "{{ states('input_select.carico_15_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_16_potenza
          value: "{{ states('input_select.carico_16_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_17_potenza
          value: "{{ states('input_select.carico_17_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_18_potenza
          value: "{{ states('input_select.carico_18_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_19_potenza
          value: "{{ states('input_select.carico_19_potenza') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_20_potenza
          value: "{{ states('input_select.carico_20_potenza') }}"

      - service: input_text.set_value
        data:
          entity_id: input_text.carico_1_switch
          value: "{{ states('input_select.carico_1_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_2_switch
          value: "{{ states('input_select.carico_2_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_3_switch
          value: "{{ states('input_select.carico_3_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_4_switch
          value: "{{ states('input_select.carico_4_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_5_switch
          value: "{{ states('input_select.carico_5_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_6_switch
          value: "{{ states('input_select.carico_6_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_7_switch
          value: "{{ states('input_select.carico_7_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_8_switch
          value: "{{ states('input_select.carico_8_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_9_switch
          value: "{{ states('input_select.carico_9_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_10_switch
          value: "{{ states('input_select.carico_10_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_11_switch
          value: "{{ states('input_select.carico_11_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_12_switch
          value: "{{ states('input_select.carico_12_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_13_switch
          value: "{{ states('input_select.carico_13_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_14_switch
          value: "{{ states('input_select.carico_14_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_15_switch
          value: "{{ states('input_select.carico_15_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_16_switch
          value: "{{ states('input_select.carico_16_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_17_switch
          value: "{{ states('input_select.carico_17_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_18_switch
          value: "{{ states('input_select.carico_18_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_19_switch
          value: "{{ states('input_select.carico_19_switch') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_20_switch
          value: "{{ states('input_select.carico_20_switch') }}"

      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Script Configurazione - Salva - Fine salvataggio"
